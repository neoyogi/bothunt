input { 
  udp {
    port => 3333
    type => "bothunt_udp"
    codec => "json"
    }
  # http {
  #   port => 3333
  #   type => "bothunt_http"
  #   codec => "json"
  #   }
 }

filter {
  # START => To check if the registration ID is valid
  if ([type] == "bothunt_udp" or [type] == "bothunt_http") {
    if ([registration_id] and [registration_id] =~ /\h+/ ){
      mutate{
        add_tag => ["valid_reg_id"]
      }
    }
  }
  #  END => To check if the registration ID is valid

  # START => To Check if the http_referrer is correct
  if ([http_referrer] and [http_referrer] =~ /.+/){
    if ("_grokparsefailure" in [tags]){
      mutate { remove_tag => ["_grokparsefailure"]}
    }
    grok{
      match => {"http_referrer" => "%{URI}"}
    }
    if "_grokparsefailure" in [tags]{
      mutate{
        add_tag => ["invalid_http_referrer"]
        remove_tag => ["_grokparsefailure"]
      }
    }
    else{
      mutate { add_tag => ["valid_http_referrer"]}
    }
  }
  # END => To Check if the http_referrer is correct

  # START => To check if the IP address is valid
  if ([ip_address] and [ip_address] =~ /.+/){
    if ("_grokparsefailure" in [tags]){
      mutate { remove_tag => ["_grokparsefailure"]}
    }
    grok{
      match => {"ip_address" => "%{IPV4}"}
    }
    if "_grokparsefailure" in [tags]{
      mutate{
        add_tag => ["invalid_ip_address"]
        remove_tag => ["_grokparsefailure"]
      }
    }
    else{
      mutate { add_tag => ["valid_ip_address"]}
    }
  }
  # END => To check if the IP address is valid

  # START => To check if the user ID is valid
  if ([user_id] and [user_id] =~ /.+/){
    if ("_grokparsefailure" in [tags]){
      mutate { remove_tag => ["_grokparsefailure"]}
    }
    grok{
      match => {"user_id" => "%{USERNAME}"}
    }
    if "_grokparsefailure" in [tags]{
      mutate{
        add_tag => ["invalid_user_id"]
        remove_tag => ["_grokparsefailure"]
      }
    }
    else{
      mutate { add_tag => ["valid_user_id"]}
    }
  }
  # END => To check if the user_id is valid

  # START => To check if site_url is correct
  if ([site_url] and [site_url] =~ /.+/){
    if ("_grokparsefailure" in [tags]){
      mutate { remove_tag => ["_grokparsefailure"]}
    }
    grok{
      match => {"site_url" => "%{URI}"}
    }
    if "_grokparsefailure" in [tags]{
      mutate{
        add_tag => ["invalid_site_url"]
        remove_tag => ["_grokparsefailure"]
      }
    }
    else{
      mutate { add_tag => ["valid_site_url"]}
    }
  }
  # END => To Check if the site_url is correct

  # START => Parse headers
  if ([headers]){
    if ("_grokparsefailure" in [tags]){
      mutate { remove_tag => ["_grokparsefailure"]}
    }

    #START => Parse user-agent
    if ([headers][user-agent] and [headers][user-agent] =~ /.+/){
      grok{
        match => { "[headers][user-agent]" => "%{GREEDYDATA:user_agent}" }
      }
      if "_grokparsefailure" in [tags]{
        mutate{
          add_tag => ["invalid_user_agent"]
          remove_tag => ["_grokparsefailure"]
        }
      }
      else{
        mutate { add_tag => ["valid_user_agent"]}
        useragent{
          source => "user_agent"
          prefix => "ua_"
        }
      }
    }
    #END => Parse user-agent

    #START => Parse content type
    if ([headers][content-type] and [headers][content-type] =~ /.+/){
      grok{
        match => {"[headers][content-type]" => "\s*(?<content_type>.[^;]*).*" }
      }
    if "_grokparsefailure" in [tags]{
        mutate{
          add_tag => ["failed_to_get_content_type"]
          remove_tag => ["_grokparsefailure"]
        }
      }else{
        mutate{
          add_tag => ["valid_content_type"]
        }
      }
    }
    #END => Parse content type

    # START => Parse Accept Header
    if ([headers][accept] and [headers][accept] =~ /.+/){
      grok{
        match => {"[headers][accept]" => ["\s*(?<accept_type>([^,^\s]+\/[^,^\s]+))*(,)*\s*(?<accept_type>([^,^\s]+\/[^,^\s]+))*(,)*\s*(?<accept_type>([^,^\s]+\/[^,^\s]+))*(,)*\s*(?<accept_type>([^,^\s]+\/[^,^\s]+))*(,)*\s*(?<accept_type>([^,^\s]+\/[^,^\s]+))*(,)*\s*(?<accept_type>([^,^\s]+\/[^,^\s]+))*(,)*\s*(?<accept_type>([^,^\s]+\/[^,^\s]+))*(,)*\s*(?<accept_type>([^,^\s]+\/[^,^\s]+))*(,)*\s*(?<accept_type>([^,^\s]+\/[^,^\s]+))*(,)*\s*(?<accept_type>([^,^\s]+\/[^,^\s]+))*(,)*\s*(?<accept_type>([^,^\s]+\/[^,^\s]+))*(,)*\s*(?<accept_type>([^,^\s]+\/[^,^\s]+))*(,)*\s*(?<accept_type>([^,^\s]+\/[^,^\s]+))*(,)*\s*(?<accept_type>([^,^\s]+\/[^,^\s]+))*(,)*\s*(?<accept_type>([^,^\s]+\/[^,^\s]+))*(,)*\s*(?<accept_type>([^,^\s]+\/[^,^\s]+))*(,)*\s*(?<accept_type>([^,^\s]+\/[^,^\s]+))*(,)*\s*"]}
      }
      if "_grokparsefailure" in [tags]{
        mutate{
          add_tag => ["failed_to_parse_Accept_header"]
          remove_tag => ["_grokparsefailure"]
        }
      }else{
        mutate{ add_tag => ["valid_accept_header"]}
      }
    }
    # END => Parse Accept Header

    # START => Parse connection Header
    if ([headers][connection] and [headers][connection] =~ /.+/){
      grok{
        match => {"[headers][connection]" => "\s*%{GREEDYDATA:connection}\s*"}
      }
      if "_grokparsefailure" in [tags]{
        mutate{
          add_tag => ["failed_to_parse_connection_header"]
          remove_tag => ["_grokparsefailure"]
        }
      }else{
        mutate{ add_tag => ["valid_connection_header"]}
      }
    }
    # END => Parse connection Header

    # START => Parse accept encoding Header
    if ([headers][accept-encoding] and [headers][accept-encoding] =~ /.+/){
      grok{
        match => {"[headers][accept-encoding]" => "\s*(?<accept_encoding>([^,^\s]+))*(,)*\s*(?<accept_encoding>([^,^\s]+))*(,)*\s*(?<accept_encoding>([^,^\s]+))*(,)*\s*(?<accept_encoding>([^,^\s]+))*(,)*\s*(?<accept_encoding>([^,^\s]+))*(,)*\s*(?<accept_encoding>([^,^\s]+))*(,)*"}
      }
      if "_grokparsefailure" in [tags]{
        mutate{
          add_tag => ["failed_to_parse_accept_encoding_header"]
          remove_tag => ["_grokparsefailure"]
        }
      }else{
        mutate{ add_tag => ["valid_accept_encoding_header"]}
      }
    }
    # END => Parse accept encoding Header

    # START => Parse accept language Header
    if ([headers][accept-language] and [headers][accept-language] =~ /.+/){
      grok{
        match => {"[headers][accept-language]" => "\s*(?<accept_language>([^,^\s]+))*(,)*\s*(?<accept_language>([^,^\s]+))*(,)*\s*(?<accept_language>([^,^\s]+))*(,)*\s*(?<accept_language>([^,^\s]+))*(,)*\s*(?<accept_language>([^,^\s]+))*(,)*\s*(?<accept_language>([^,^\s]+))*(,)*"}
      }
      if "_grokparsefailure" in [tags]{
        mutate{
          add_tag => ["failed_to_parse_accept_language_header"]
          remove_tag => ["_grokparsefailure"]
        }
      }else{
        mutate{ add_tag => ["valid_accept_language_header"]}
      }
    }
    # END => Parse accept language Header

    # START => Parse cache-control language Header
    if ([headers][cache-control] and [headers][cache-control] =~ /.+/){
      grok{
        match => {"[headers][cache-control]" => "\s*%{GREEDYDATA:cache_control}\s*"}
      }
      if "_grokparsefailure" in [tags]{
        mutate{
          add_tag => ["failed_to_parse_cache_control"]
          remove_tag => ["_grokparsefailure"]
        }
      }else{
        mutate{ add_tag => ["valid_cache_control_language_header"]}
      }
    }
    # END => Parse cache-control language Header

  }
  # END => Parse headers
}
# END => filter

output {
  if ("valid_reg_id" in [tags]){
  elasticsearch {
    hosts => ["localhost"]
    index => "bothunt-%{+YYYY.MM.dd}"
    }
  }

  stdout {
    codec => rubydebug
  }

  elasticsearch{
    hosts => ["localhost"]
    index => "bothunt-invalid-%{+YYYY.MM.dd}"
  }
}
